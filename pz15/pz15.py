import sqlite3

# Подключение к базе данных (если файла нет, он будет создан)
conn = sqlite3.connect('bank.db')

# Создаем курсор для выполнения SQL-запросов
cursor = conn.cursor()

# Создание таблицы Клиент
cursor.execute('''
CREATE TABLE IF NOT EXISTS Клиент (
    код_клиента INTEGER PRIMARY KEY AUTOINCREMENT,
    клиент TEXT NOT NULL,
    периодический_платеж REAL NOT NULL,
    годовой_процент REAL NOT NULL,
    срок_вклада INTEGER NOT NULL,
    пластиковая_карта BOOLEAN NOT NULL,
    конечная_сумма REAL
)
''')

# Подтверждаем изменения
conn.commit()


# Функция для добавления клиента
def add_client():
    клиент = input("Введите ФИО клиента: ")
    периодический_платеж = float(input("Введите периодический платеж: "))
    годовой_процент = float(input("Введите годовой процент: "))
    срок_вклада = int(input("Введите срок вклада (в годах): "))
    пластиковая_карта = int(input("Есть пластиковая карта? (1 - Да, 0 - Нет): "))

    cursor.execute('''
    INSERT INTO Клиент (клиент, периодический_платеж, годовой_процент, срок_вклада, пластиковая_карта, конечная_сумма)
    VALUES (?, ?, ?, ?, ?, NULL)
    ''', (клиент, периодический_платеж, годовой_процент, срок_вклада, пластиковая_карта))
    conn.commit()
    print(f"Клиент {клиент} добавлен.")


# Функция для обновления данных клиента
def update_client():
    код_клиента = int(input("Введите код клиента для обновления: "))
    периодический_платеж = float(input("Введите новый периодический платеж: "))
    годовой_процент = float(input("Введите новый годовой процент: "))
    срок_вклада = int(input("Введите новый срок вклада (в годах): "))
    пластиковая_карта = int(input("Есть пластиковая карта? (1 - Да, 0 - Нет): "))

    cursor.execute('''
    UPDATE Клиент
    SET периодический_платеж = ?, годовой_процент = ?, срок_вклада = ?, пластиковая_карта = ?
    WHERE код_клиента = ?
    ''', (периодический_платеж, годовой_процент, срок_вклада, пластиковая_карта, код_клиента))
    conn.commit()
    print(f"Данные клиента с кодом {код_клиента} обновлены.")


# Функция для удаления клиента
def delete_client():
    код_клиента = int(input("Введите код клиента для удаления: "))
    cursor.execute('DELETE FROM Клиент WHERE код_клиента = ?', (код_клиента,))
    conn.commit()
    print(f"Клиент с кодом {код_клиента} удален.")


# Функция для расчета конечной суммы
def calculate_final_amount():
    cursor.execute('SELECT код_клиента, клиент, периодический_платеж, годовой_процент, срок_вклада FROM Клиент')
    clients = cursor.fetchall()

    for client in clients:
        код_клиента, клиент, периодический_платеж, годовой_процент, срок_вклада = client
        конечная_сумма = периодический_платеж * (1 + годовой_процент / 100) ** срок_вклада
        cursor.execute('''
        UPDATE Клиент
        SET конечная_сумма = ?
        WHERE код_клиента = ?
        ''', (конечная_сумма, код_клиента))
        conn.commit()
        print(f"Конечная сумма для {клиент} рассчитана: {конечная_сумма:.2f} руб.")


# Функция для отображения всех клиентов
def display_clients():
    cursor.execute('SELECT * FROM Клиент')
    clients = cursor.fetchall()
    for client in clients:
        print(client)


# Основное меню
def main_menu():
    while True:
        print("\nПриложение БАНК. Выберите действие:")
        print("1. Добавить клиента")
        print("2. Обновить данные клиента")
        print("3. Удалить клиента")
        print("4. Рассчитать конечные суммы для всех клиентов")
        print("5. Показать всех клиентов")
        print("6. Выйти")

        choice = input("Ваш выбор: ")

        if choice == '1':
            add_client()
        elif choice == '2':
            update_client()
        elif choice == '3':
            delete_client()
        elif choice == '4':
            calculate_final_amount()
        elif choice == '5':
            display_clients()
        elif choice == '6':
            print("Выход из программы.")
            break
        else:
            print("Неверный выбор, попробуйте снова.")


# Запуск меню
main_menu()

# Закрытие соединения с базой данных
conn.close()
